#!/usr/bin/env bash

export BEAVER_DAEMON=false
# export NODE_COMPILE_CACHE=.v8-cache
TEST_PATH="test/example"
OUTPUT_PATH="$TEST_PATH/hosts"

DEBUG="$1"
if [ "$DEBUG" ]; then
    HOSTS="l61.a1.example.com"
else
    HOSTS="l61.a1.example.com l62.a1.example.com l62.b1.example.com"
fi

for BEAVER_HOSTNAME in $HOSTS; do
    BEAVER_HOSTNAME_PATH="${OUTPUT_PATH}/${BEAVER_HOSTNAME}"
    if [ -d "${BEAVER_HOSTNAME_PATH}" ]; then
        if [ ! -d "${BEAVER_HOSTNAME_PATH}-saved" ]; then
            cp -R ${BEAVER_HOSTNAME_PATH} ${BEAVER_HOSTNAME_PATH}-saved
        fi
    else
        mkdir -p ${BEAVER_HOSTNAME_PATH}
        if [ ! -d "${BEAVER_HOSTNAME_PATH}-saved" ]; then
            mkdir -p ${BEAVER_HOSTNAME_PATH}-saved
        fi
    fi
    if time beaver -v \
        --input=${TEST_PATH}/structure.json \
        --output=${BEAVER_HOSTNAME_PATH} \
        --hostname=${BEAVER_HOSTNAME} \
        --home=${BEAVER_HOSTNAME_PATH}-home \
        --replaceHome=/usr/local/etc/beaver \
        --platform=freebsd \
        --disable-notify \
        --disable-acme \
        --disable-overseer; then
        echo exited with code 1
    else
        echo exited with code 2
    fi
    echo
done

{
    for ITEM in $(find "$OUTPUT_PATH" -name "*.csr" | grep -vE -e "/*.-saved/"); do
        openssl req -text -noout -in ${ITEM} | grep -v -e '[a-z0-9]:[a-z0-9]' -e 'Signature Value:' -e 'Modulus:' -e 'pub:' > ${ITEM}.txt
    done
} &

{
    for ITEM in $(find "$OUTPUT_PATH" -name "*.crt" -o -name "*.ca" -o -name "*.ca-crt" | grep -vE -e "/*.-saved/"); do
        openssl x509 -in ${ITEM} -text -noout | grep -v -e 'pub:' -e 'Signature Value:' -e 'Modulus:' -e 'X509v3 Authority Key Identifier:' -e 'X509v3 Subject Key Identifier:' -e 'Serial Number:' -e 'Validity' -e 'Not Before:' -e 'Not After :' -e 'pub: $' -e ':\w\w$' -e ':\w\w:$' -e '^$' > ${ITEM}.txt
    done
} &

sed -i '' '/^; Exported/d;/;serial$/d' $(find "$OUTPUT_PATH" -name "*.dns" | grep -vE -e "/*.-saved/") &

{
for ITEM in $(find "$OUTPUT_PATH" -name "notificator.json" | grep -vE -e "/*.-saved/"); do
    node - -- $ITEM <<- 'EOF'
        const fs = require('fs');
        const file = process.argv.pop();
        (async () => {
            const json = await fs.promises.readFile(file, 'utf8');
            const data = JSON.parse(json);
            data.forEach((v) => {
                v.date = (new Date(0)).toISOString();
                v.message = v.message.replace(/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/g, (new Date(0)).toISOString());
                const messageTemp = v.message.split('\n');
                v.message = [messageTemp.shift(), ...messageTemp.sort((a, b) => a.localeCompare(b))].join('\n');
            });
            await fs.promises.writeFile(file, JSON.stringify(data, null, 4));
        })();
EOF
done
} &

{
for ITEM in $(find "$OUTPUT_PATH" -name "last.json" | grep -vE -e "/*.-saved/"); do
    node - -- $ITEM <<- 'EOF'
        const fs = require('fs');
        const file = process.argv.pop();
        (async () => {
            const json = await fs.promises.readFile(file, 'utf8');
            const data = JSON.parse(json);
            data.date = new Date(0);
            data.version = 'dev';
            await fs.promises.writeFile(file, JSON.stringify(data, null, 4));
        })();
EOF
done
} &

{
for ITEM in $(find "$OUTPUT_PATH" -name "state.json" | grep -vE -e "/*.-saved/"); do
    node - -- $ITEM <<- 'EOF'
        const fs = require('fs');
        const file = process.argv.pop();
        (async () => {
            const json = await fs.promises.readFile(file, 'utf8');
            const data = JSON.parse(json);
            for (const [key, value] of Object.entries(data)) {
                data[key] = new Date(0);
            }
            await fs.promises.writeFile(file, JSON.stringify(data, null, 4));
        })();
EOF
done
} &

wait
